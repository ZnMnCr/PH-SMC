{
    "sourceFile": "CDPRSimtest2.m",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 97,
            "patches": [
                {
                    "date": 1729815935215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729815985134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+clear\r\n+close all\r\n+clc\r\n+\r\n+addpath('./simulation_scripts');\r\n+\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length仿真时长\r\n+sim.t_end = 3.5;\r\n+\r\n+\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+%% Define 6DOF CDPR plant\r\n+pa.m=6000;%动平台质量\r\n+pa.g=[0;0;9.8];%重力加速度\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);\r\n+[ctrl]=DefineTraj();\r\n+ctrl.selector = 2;\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0.5 -1 2 3 2 0].';\r\n+sim.p0 = [0 0 0 0 0 0].';\r\n+sim.x0 = [sim.q0; sim.p0];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);\r\n+% Solve ODE\r\n+% tic\r\n+ [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+% toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl);\r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+%保存数据到指定路径\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+end\r\n+plotAllData(res,ctrl);%出图\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729819565457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,121 +1,60 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n clear\r\n close all\r\n clc\r\n \r\n+%% Add scripts path\r\n addpath('./simulation_scripts');\r\n \r\n-\r\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n-% Simulation length仿真时长\r\n+% Simulation length  仿真时长\r\n sim.t_end = 3.5;\r\n \r\n-\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n q_sym = [q1 q2 q3 q4 q5 q6].';\r\n p_sym = [p1 p2 p3 p4 p5 p6].';\r\n \r\n-%% Define 6DOF CDPR plant\r\n-pa.m=6000;%动平台质量\r\n-pa.g=[0;0;9.8];%重力加速度\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);\r\n-[ctrl]=DefineTraj();\r\n-ctrl.selector = 2;\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0.5 -1 2 3 2 0].';\r\n-sim.p0 = [0 0 0 0 0 0].';\r\n-sim.x0 = [sim.q0; sim.p0];\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+ctrl.selector = 2;%Selector for control law\r\n \r\n-\r\n-% Comcatinate model with control law\r\n-ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);\r\n-% Solve ODE\r\n-% tic\r\n- [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-% toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-%保存数据到指定路径\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-end\r\n-plotAllData(res,ctrl);%出图\r\n-disp(\"打印数据结束\")\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-addpath('./simulation_scripts');\r\n-\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length仿真时长\r\n-sim.t_end = 3.5;\r\n-\r\n-\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-%% Define 6DOF CDPR plant\r\n-pa.m=6000;%动平台质量\r\n-pa.g=[0;0;9.8];%重力加速度\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);\r\n-[ctrl]=DefineTraj();\r\n-ctrl.selector = 2;\r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);\r\n+    [ctrl]=JoelController(sys,ctrl);%K-P SC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-0.5 -1 2 3 2 0].';\r\n-sim.p0 = [0 0 0 0 0 0].';\r\n+sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n-ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);\r\n+ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n-% tic\r\n+ tic\r\n  [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-% toc\r\n+ toc\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n res.p0 = res.x(:,7:12);\r\n@@ -124,9 +63,9 @@\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n disp(\"运行结束，打印数据\")\r\n-%保存数据到指定路径\r\n+% Save results\r\n if ctrl.selector == 1\r\n     TSMC = res;\r\n     save('Results/TSMC.mat', 'TSMC');\r\n elseif ctrl.selector == 2\r\n@@ -135,7 +74,6 @@\n else\r\n     Joel = res;\r\n     save('Results/Joel.mat', 'Joel');\r\n end\r\n-%save('Results\\Results.mat', 'res');%windows \r\n-plotAllData(res,ctrl);%出图\r\n+plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729819602672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 3.5;\r\n+\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-P SC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.x0 = [sim.q0; sim.p0];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+ tic\r\n+ [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+ toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl);\r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729819641425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n \r\n % Comcatinate model with control law\r\n ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n- tic\r\n+\r\n  [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n- toc\r\n+\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n res.p0 = res.x(:,7:12);\r\n"
                },
                {
                    "date": 1729819697372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n \r\n % Comcatinate model with control law\r\n ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n-\r\n+tic\r\n  [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-\r\n+toc\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n res.p0 = res.x(:,7:12);\r\n@@ -77,83 +77,4 @@\n     save('Results/Joel.mat', 'Joel');\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 3.5;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-ctrl.selector = 2;%Selector for control law\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-P SC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.x0 = [sim.q0; sim.p0];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n- tic\r\n- [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n- toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729819727158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-2);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1729838424939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n"
                },
                {
                    "date": 1729838438085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-2);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1729840544849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,17 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n elseif ctrl.selector  == 2\r\n    [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-P SC\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n"
                },
                {
                    "date": 1729840697410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n"
                },
                {
                    "date": 1729842094492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,13 +68,16 @@\n % Save results\r\n if ctrl.selector == 1\r\n     TSMC = res;\r\n     save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n elseif ctrl.selector == 2\r\n     sakata =res;\r\n     save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n else\r\n     Joel = res;\r\n     save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729842158943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n"
                },
                {
                    "date": 1729842386186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n"
                },
                {
                    "date": 1729842646641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 3.5;\r\n+\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.x0 = [sim.q0; sim.p0];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tic\r\n+ [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl);\r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729843167012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 3.5;\r\n+\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.x0 = [sim.q0; sim.p0];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tic\r\n+ [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl);\r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729843446751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,91 +29,8 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.x0 = [sim.q0; sim.p0];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tic\r\n- [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 3.5;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n@@ -163,87 +80,4 @@\n     disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 3.5;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.x0 = [sim.q0; sim.p0];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tic\r\n- [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1729843591940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n"
                },
                {
                    "date": 1731662436303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 3.5;\r\n+sim.t_end = 10;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-0.5 -1 2 3 2 0].';%Define the inital value of configuration\r\n+sim.q0 = [-10 -1 1 0.5 -0.4 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n@@ -52,9 +52,9 @@\n % Comcatinate model with control law\r\n ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tic\r\n- [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+ [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n toc\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n"
                },
                {
                    "date": 1731662715152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 10;\r\n+sim.t_end = 5;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1731671996803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-10 -1 1 0.5 -0.4 0].';%Define the inital value of configuration\r\n+sim.q0 = [-10 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n"
                },
                {
                    "date": 1731674584209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 5;\r\n+sim.t_end = 0.02;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1731722047767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n-ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tic\r\n  [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n toc\r\n"
                },
                {
                    "date": 1731722213163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-10 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.q0 = [-6 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n"
                },
                {
                    "date": 1731722627157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+q_sym = [q1 q2 q3 q4 q5 q6]S.';\r\n p_sym = [p1 p2 p3 p4 p5 p6].';\r\n \r\n % Define 6DOF CDPR plant\r\n pa.m=6000;%Quality of mobile platform\r\n"
                },
                {
                    "date": 1731722633876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6]S.';\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n p_sym = [p1 p2 p3 p4 p5 p6].';\r\n \r\n % Define 6DOF CDPR plant\r\n pa.m=6000;%Quality of mobile platform\r\n"
                },
                {
                    "date": 1731722797671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,17 +41,17 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-6 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.q0 = [-10 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tic\r\n  [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n toc\r\n"
                },
                {
                    "date": 1731722809151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-10 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.q0 = [-5 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.x0 = [sim.q0; sim.p0];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n"
                },
                {
                    "date": 1731724439882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n-ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tic\r\n  [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n toc\r\n"
                },
                {
                    "date": 1732418959649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 0.02;\r\n+\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-5 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zreos(36,1);\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tic\r\n+ [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl);\r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732418986453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n %% Run simulation\r\n % Define initial conditions\r\n sim.q0 = [-5 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zreos(36,1);\r\n+sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n@@ -81,87 +81,4 @@\n     disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 0.02;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-5 -0 0 0 0 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.x0 = [sim.q0; sim.p0];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tic\r\n- [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732424788150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 0.02;\r\n+sim.t_end = 5;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732425334103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n res.p0 = res.x(:,7:12);\r\n+res.dis = res.x(:,25:30)+res.x(:,43:48);\r\n \r\n-\r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n disp(\"运行结束，打印数据\")\r\n"
                },
                {
                    "date": 1732426103209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732456411335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-5 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.q0 = [-5.7 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n"
                },
                {
                    "date": 1732498499106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 5;\r\n+sim.t_end = 8;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732503616223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-5.7 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.q0 = [-5.5 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n"
                },
                {
                    "date": 1732503826236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-5.5 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.q0 = [-6.5 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n"
                },
                {
                    "date": 1732506097549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,15 @@\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n res.p0 = res.x(:,7:12);\r\n-res.dis = res.x(:,25:30)+res.x(:,43:48);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis = res.dis1+res.dis2;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n"
                },
                {
                    "date": 1732520860108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732521269062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n@@ -41,9 +41,9 @@\n     [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n end\r\n %% Run simulation\r\n % Define initial conditions\r\n-sim.q0 = [-6.5 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n"
                },
                {
                    "date": 1732521437216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-2);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732521490354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-2);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732521911247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-2);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732522054105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(36,1);\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.5e-1);%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tic\r\n+ [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis = res.dis1+res.dis2;\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl);\r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732522122266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.5e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.8e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n@@ -87,94 +87,4 @@\n     disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 8;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zeros(36,1);\r\n-sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-2);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tic\r\n- [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-res.q_hat1 = res.x(:,13:18);\r\n-res.p_hat1 = res.x(:,19:24);\r\n-res.dis1 = res.x(:,25:30);\r\n-res.q_hat2 = res.x(:,31:36);\r\n-res.p_hat2 = res.x(:,37:42);\r\n-res.dis2 = res.x(:,43:48);\r\n-res.dis = res.dis1+res.dis2;\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732522254437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(36,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.8e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.6e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732522575832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n res.dis1 = res.x(:,25:30);\r\n res.q_hat2 = res.x(:,31:36);\r\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n-res.dis = res.dis1+res.dis2;\r\n+res.dis = res.dis1;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n"
                },
                {
                    "date": 1732522643517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n res.dis1 = res.x(:,25:30);\r\n res.q_hat2 = res.x(:,31:36);\r\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n-res.dis = res.dis1;\r\n+res.dis = res.dis2;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n"
                },
                {
                    "date": 1732522736264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tic\r\n- [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+ [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);7\r\n toc\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n"
                },
                {
                    "date": 1732522880748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n res.dis1 = res.x(:,25:30);\r\n res.q_hat2 = res.x(:,31:36);\r\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n-res.dis = res.dis2;\r\n+res.dis =res.dis1+ res.dis2;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n"
                },
                {
                    "date": 1732523071609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tic\r\n- [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);7\r\n+ [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n toc\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n"
                },
                {
                    "date": 1732523276542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 8;\r\n+sim.t_end = 6;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732524475701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n res.dis1 = res.x(:,25:30);\r\n res.q_hat2 = res.x(:,31:36);\r\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n-res.dis =res.dis1+ res.dis2;\r\n+res.dis =res.dis1;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n"
                },
                {
                    "date": 1732524669214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n res.dis1 = res.x(:,25:30);\r\n res.q_hat2 = res.x(:,31:36);\r\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n-res.dis =res.dis1;\r\n+res.dis =res.dis1+res.dis2;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n"
                },
                {
                    "date": 1732703262141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n %% Run simulation\r\n % Define initial conditions\r\n sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zeros(36,1);\r\n+sim.z_hat = zeros(54,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.6e-1);%Set options for ode solver\r\n \r\n"
                },
                {
                    "date": 1732703444339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,10 @@\n res.dis1 = res.x(:,25:30);\r\n res.q_hat2 = res.x(:,31:36);\r\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n-res.dis =res.dis1+res.dis2;\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n"
                },
                {
                    "date": 1732704826418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(54,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.6e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.8e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732705170545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 6;\r\n+sim.t_end = 2;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732705672427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 2;\r\n+sim.t_end = 6;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732708615641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n res.dis2 = res.x(:,43:48);\r\n res.dis3 = res.x(:,61:66);\r\n res.dis =res.dis1+res.dis2+res.dis3;\r\n \r\n+\r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl);\r\n \r\n disp(\"运行结束，打印数据\")\r\n"
                },
                {
                    "date": 1732713524106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n [sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n [ctrl]=DefineTraj();% Define desired trajectory\r\n %Selector for control law \r\n-ctrl.selector = 2;%1:TSMC;2:PBSMC;3:K-P\r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n \r\n %% PB-SMC控制算法设计\r\n if ctrl.selector  == 1\r\n     [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n"
                },
                {
                    "date": 1732771092744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(54,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',0.8e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732771103958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(54,1);\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732771513143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tic\r\n- [res.t,res.x] = ode78(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+ [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n toc\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.q = res.x(:,1:6);\r\n"
                },
                {
                    "date": 1732774653079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 6;\r\n+sim.t_end = 4;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732869879867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,10 @@\n % Define initial conditions\r\n sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n sim.z_hat = zeros(54,1);\r\n-sim.x0 = [sim.q0; sim.p0; sim.z_hat];\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n \r\n options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n \r\n \r\n"
                },
                {
                    "date": 1732869996307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 4;\r\n+sim.t_end = 2;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732870367462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 2;\r\n+sim.t_end = 4;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732871774316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 4;\r\n+\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tic\r\n+ [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = res.x(:,67);\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl);\r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732872875361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 4;\r\n+sim.t_end = 10;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n@@ -90,97 +90,4 @@\n     disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 4;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zeros(54,1);\r\n-sim.adptiveParam = 4;\r\n-sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tic\r\n- [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-res.q_hat1 = res.x(:,13:18);\r\n-res.p_hat1 = res.x(:,19:24);\r\n-res.dis1 = res.x(:,25:30);\r\n-res.q_hat2 = res.x(:,31:36);\r\n-res.p_hat2 = res.x(:,37:42);\r\n-res.dis2 = res.x(:,43:48);\r\n-res.dis3 = res.x(:,61:66);\r\n-res.dis =res.dis1+res.dis2+res.dis3;\r\n-\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732932313182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n res.dis =res.dis1+res.dis2+res.dis3;\r\n res.k4 = res.x(:,67);\r\n \r\n % Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl);\r\n+[res]=CompulateData(res,sys,ctrl); \r\n \r\n disp(\"运行结束，打印数据\")\r\n % Save results\r\n if ctrl.selector == 1\r\n"
                },
                {
                    "date": 1732933632354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tic\r\n+ [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = res.x(:,67);\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl); \r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732956873329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,11 @@\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n res.dis3 = res.x(:,61:66);\r\n res.dis =res.dis1+res.dis2+res.dis3;\r\n-res.k4 = res.x(:,67);\r\n+    kMax = 4;\r\n+    k4 = kMax*((res.x(:,67) >= kMax) + (res.x(:,67) < kMax).* (res.x(:,67) / kMax));\r\n+res.k4 = k4;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl); \r\n \r\n@@ -90,97 +92,4 @@\n     disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 10;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zeros(54,1);\r\n-sim.adptiveParam = 4;\r\n-sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tic\r\n- [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-res.q_hat1 = res.x(:,13:18);\r\n-res.p_hat1 = res.x(:,19:24);\r\n-res.dis1 = res.x(:,25:30);\r\n-res.q_hat2 = res.x(:,31:36);\r\n-res.p_hat2 = res.x(:,37:42);\r\n-res.dis2 = res.x(:,43:48);\r\n-res.dis3 = res.x(:,61:66);\r\n-res.dis =res.dis1+res.dis2+res.dis3;\r\n-res.k4 = res.x(:,67);\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl); \r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732957166767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,10 @@\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n res.dis3 = res.x(:,61:66);\r\n res.dis =res.dis1+res.dis2+res.dis3;\r\n-    kMax = 4;\r\n-    k4 = kMax*((res.x(:,67) >= kMax) + (res.x(:,67) < kMax).* (res.x(:,67) / kMax));\r\n+kMax = 4;\r\n+k4 = kMax*((res.x(:,67) >= kMax) + (res.x(:,67) < kMax).* (res.x(:,67) / kMax));\r\n res.k4 = k4;\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl); \r\n"
                },
                {
                    "date": 1732957289500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n-sim.t_end = 8;\r\n+sim.t_end = 20;\r\n \r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n"
                },
                {
                    "date": 1732968680194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+refine = 4;\r\n+kMax = 4;\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tout = tstart;\r\n+yout = sim.x0;\r\n+teout = [];\r\n+yeout = [];\r\n+ieout = [];\r\n+tic\r\n+while 1\r\n+ [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n+\r\n+nt = length(t);\r\n+   tout = [tout; t(2:nt)]\r\n+   yout = [yout; y(2:nt,:)];\r\n+   teout = [teout; te];          % Events at tstart are never reported.\r\n+   yeout = [yeout; ye];\r\n+   if sim.tstart >= sim.t_end\r\n+       break;\r\n+   end\r\n+    xe(67) = antiSat(x, kMax)\r\n+    sim.x0 = xe;\r\n+    options = odeset(options,'InitialStep',t(nt)-t(nt-refine),...\r\n+      'MaxStep',t(nt)-t(1));\r\n+   \r\n+   tstart = t(nt);\r\n+\r\n+end\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.t = tout;\r\n+res.x = yout;\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = k4;\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl); \r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732968729063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n sim.t_end = 8;\r\n refine = 4;\r\n-kMax = 4;\r\n+kMax = 4.1;\r\n %% Define system and control parameters\r\n % Define symbolic variables\r\n syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n q_sym = [q1 q2 q3 q4 q5 q6].';\r\n"
                },
                {
                    "date": 1732968749301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n-tout = tstart;\r\n+tout = 0;\r\n yout = sim.x0;\r\n teout = [];\r\n yeout = [];\r\n ieout = [];\r\n@@ -116,99 +116,4 @@\n     disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 20;\r\n-\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zeros(54,1);\r\n-sim.adptiveParam = 4;\r\n-sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tic\r\n- [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),0:sim.delta_t:sim.t_end,sim.x0,options);\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-res.q_hat1 = res.x(:,13:18);\r\n-res.p_hat1 = res.x(:,19:24);\r\n-res.dis1 = res.x(:,25:30);\r\n-res.q_hat2 = res.x(:,31:36);\r\n-res.p_hat2 = res.x(:,37:42);\r\n-res.dis2 = res.x(:,43:48);\r\n-res.dis3 = res.x(:,61:66);\r\n-res.dis =res.dis1+res.dis2+res.dis3;\r\n-kMax = 4;\r\n-k4 = kMax*((res.x(:,67) >= kMax) + (res.x(:,67) < kMax).* (res.x(:,67) / kMax));\r\n-res.k4 = k4;\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl); \r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732968766512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n addpath('./simulation_scripts');\r\n \r\n %% Simulation settings\r\n % Simulation step 仿真步长\r\n+sim.tstart = 0;\r\n sim.delta_t = 0.01;\r\n % Simulation length  仿真时长\r\n sim.t_end = 8;\r\n refine = 4;\r\n"
                },
                {
                    "date": 1732968793179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n tic\r\n while 1\r\n  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n \r\n-nt = length(t);\r\n-   tout = [tout; t(2:nt)]\r\n-   yout = [yout; y(2:nt,:)];\r\n+nt = length(res.t);\r\n+   tout = [tout; res.t(2:nt)]\r\n+   yout = [yout; res.x(2:nt,:)];\r\n    teout = [teout; te];          % Events at tstart are never reported.\r\n    yeout = [yeout; ye];\r\n    if sim.tstart >= sim.t_end\r\n        break;\r\n"
                },
                {
                    "date": 1732968825332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,10 @@\n while 1\r\n  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n \r\n nt = length(res.t);\r\n-   tout = [tout; res.t(2:nt)]\r\n-   yout = [yout; res.x(2:nt,:)];\r\n+   tout = [tout; res.t(2:nt)];\r\n+   yout = [yout; res.x(:2:nt)];\r\n    teout = [teout; te];          % Events at tstart are never reported.\r\n    yeout = [yeout; ye];\r\n    if sim.tstart >= sim.t_end\r\n        break;\r\n"
                },
                {
                    "date": 1732968863647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n \r\n nt = length(res.t);\r\n    tout = [tout; res.t(2:nt)];\r\n-   yout = [yout; res.x(:2:nt)];\r\n+   yout = [yout; res.x(:,2:nt)'];\r\n    teout = [teout; te];          % Events at tstart are never reported.\r\n    yeout = [yeout; ye];\r\n    if sim.tstart >= sim.t_end\r\n        break;\r\n"
                },
                {
                    "date": 1732968874394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n \r\n nt = length(res.t);\r\n    tout = [tout; res.t(2:nt)];\r\n-   yout = [yout; res.x(:,2:nt)'];\r\n+   yout = [yout; res.x(2:nt,:)'];\r\n    teout = [teout; te];          % Events at tstart are never reported.\r\n    yeout = [yeout; ye];\r\n    if sim.tstart >= sim.t_end\r\n        break;\r\n"
                },
                {
                    "date": 1732968914438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.tstart = 0;\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+refine = 4;\r\n+kMax = 4.1;\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tout = 0;\r\n+yout = sim.x0;\r\n+teout = [];\r\n+yeout = [];\r\n+ieout = [];\r\n+tic\r\n+while 1\r\n+ [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n+\r\n+nt = length(res.t);\r\n+   tout = [tout; res.t(2:nt)];\r\n+   yout = [yout, res.x(2:nt,:)];\r\n+   teout = [teout; te];          % Events at tstart are never reported.\r\n+   yeout = [yeout; ye];\r\n+   if sim.tstart >= sim.t_end\r\n+       break;\r\n+   end\r\n+    xe(67) = antiSat(x, kMax);\r\n+    sim.x0 = xe;\r\n+    options = odeset(options,'InitialStep',t(nt)-t(nt-refine),...\r\n+      'MaxStep',t(nt)-t(1));\r\n+   \r\n+   tstart = t(nt);\r\n+\r\n+end\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.t = tout;\r\n+res.x = yout;\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = k4;\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl); \r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732968935682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,11 @@\n while 1\r\n  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n \r\n nt = length(res.t);\r\n+res.x(2:nt,:)\r\n    tout = [tout; res.t(2:nt)];\r\n-   yout = [yout, res.x(2:nt,:)];\r\n+   yout = [yout, res.x(2:nt,:)]\r\n    teout = [teout; te];          % Events at tstart are never reported.\r\n    yeout = [yeout; ye];\r\n    if sim.tstart >= sim.t_end\r\n        break;\r\n"
                },
                {
                    "date": 1732968958135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.tstart = 0;\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+refine = 4;\r\n+kMax = 4.1;\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tout = 0;\r\n+yout = sim.x0;\r\n+teout = [];\r\n+yeout = [];\r\n+ieout = [];\r\n+tic\r\n+while 1\r\n+ [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n+\r\n+nt = length(res.t);\r\n+\r\n+   tout = [tout; res.t(2:nt)];\r\n+   yout = [yout, res.x(2:nt,:)'];\r\n+   teout = [teout; te];          % Events at tstart are never reported.\r\n+   yeout = [yeout; ye];\r\n+   if sim.tstart >= sim.t_end\r\n+       break;\r\n+   end\r\n+    xe(67) = antiSat(x, kMax);\r\n+    sim.x0 = xe;\r\n+    options = odeset(options,'InitialStep',t(nt)-t(nt-refine),...\r\n+      'MaxStep',t(nt)-t(1));\r\n+   \r\n+   tstart = t(nt);\r\n+\r\n+end\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+res.t = tout;\r\n+res.x = yout;\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = k4;\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl); \r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732968967499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \r\n    tout = [tout; res.t(2:nt)];\r\n    yout = [yout, res.x(2:nt,:)'];\r\n    teout = [teout; te];          % Events at tstart are never reported.\r\n-   yeout = [yeout; ye];\r\n+   yeout = [yeout; xe];\r\n    if sim.tstart >= sim.t_end\r\n        break;\r\n    end\r\n     xe(67) = antiSat(x, kMax);\r\n"
                },
                {
                    "date": 1732968989709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n    yeout = [yeout; xe];\r\n    if sim.tstart >= sim.t_end\r\n        break;\r\n    end\r\n-    xe(67) = antiSat(x, kMax);\r\n+    xe(67) = antiSat(res.x, kMax);\r\n     sim.x0 = xe;\r\n     options = odeset(options,'InitialStep',t(nt)-t(nt-refine),...\r\n       'MaxStep',t(nt)-t(1));\r\n    \r\n@@ -118,245 +118,4 @@\n     disp(\"K-P数据保存成功\");\r\n end\r\n plotAllData(res,ctrl);%Plot results\r\n disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.tstart = 0;\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 8;\r\n-refine = 4;\r\n-kMax = 4.1;\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zeros(54,1);\r\n-sim.adptiveParam = 4;\r\n-sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tout = 0;\r\n-yout = sim.x0;\r\n-teout = [];\r\n-yeout = [];\r\n-ieout = [];\r\n-tic\r\n-while 1\r\n- [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n-\r\n-nt = length(res.t);\r\n-res.x(2:nt,:)\r\n-   tout = [tout; res.t(2:nt)];\r\n-   yout = [yout, res.x(2:nt,:)]\r\n-   teout = [teout; te];          % Events at tstart are never reported.\r\n-   yeout = [yeout; ye];\r\n-   if sim.tstart >= sim.t_end\r\n-       break;\r\n-   end\r\n-    xe(67) = antiSat(x, kMax);\r\n-    sim.x0 = xe;\r\n-    options = odeset(options,'InitialStep',t(nt)-t(nt-refine),...\r\n-      'MaxStep',t(nt)-t(1));\r\n-   \r\n-   tstart = t(nt);\r\n-\r\n-end\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.t = tout;\r\n-res.x = yout;\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-res.q_hat1 = res.x(:,13:18);\r\n-res.p_hat1 = res.x(:,19:24);\r\n-res.dis1 = res.x(:,25:30);\r\n-res.q_hat2 = res.x(:,31:36);\r\n-res.p_hat2 = res.x(:,37:42);\r\n-res.dis2 = res.x(:,43:48);\r\n-res.dis3 = res.x(:,61:66);\r\n-res.dis =res.dis1+res.dis2+res.dis3;\r\n-res.k4 = k4;\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl); \r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n-%%\r\n-% This script is used to run the simulation of CDPR system with PB-SMC control\r\n-% and compare with other control laws.\r\n-% Author: HouZongbin\r\n-% Email: 1335657223@qq.com\r\n-\r\n-clear\r\n-close all\r\n-clc\r\n-\r\n-%% Add scripts path\r\n-addpath('./simulation_scripts');\r\n-\r\n-%% Simulation settings\r\n-% Simulation step 仿真步长\r\n-sim.tstart = 0;\r\n-sim.delta_t = 0.01;\r\n-% Simulation length  仿真时长\r\n-sim.t_end = 8;\r\n-refine = 4;\r\n-kMax = 4.1;\r\n-%% Define system and control parameters\r\n-% Define symbolic variables\r\n-syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n-q_sym = [q1 q2 q3 q4 q5 q6].';\r\n-p_sym = [p1 p2 p3 p4 p5 p6].';\r\n-\r\n-% Define 6DOF CDPR plant\r\n-pa.m=6000;%Quality of mobile platform\r\n-pa.g=[0;0;9.8];%Gravity\r\n-\r\n-[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n-[ctrl]=DefineTraj();% Define desired trajectory\r\n-%Selector for control law \r\n-ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n-\r\n-%% PB-SMC控制算法设计\r\n-if ctrl.selector  == 1\r\n-    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n-elseif ctrl.selector  == 2\r\n-   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n-elseif ctrl.selector  == 3\r\n-    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n-end\r\n-%% Run simulation\r\n-% Define initial conditions\r\n-sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n-sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n-sim.z_hat = zeros(54,1);\r\n-sim.adptiveParam = 4;\r\n-sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n-\r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n-\r\n-\r\n-% Comcatinate model with control law\r\n-% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n-% Solve ODE\r\n-tout = 0;\r\n-yout = sim.x0;\r\n-teout = [];\r\n-yeout = [];\r\n-ieout = [];\r\n-tic\r\n-while 1\r\n- [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n-\r\n-nt = length(res.t);\r\n-   tout = [tout; res.t(2:nt)];\r\n-   yout = [yout; res.x(2:nt,:)'];\r\n-   teout = [teout; te];          % Events at tstart are never reported.\r\n-   yeout = [yeout; ye];\r\n-   if sim.tstart >= sim.t_end\r\n-       break;\r\n-   end\r\n-    xe(67) = antiSat(x, kMax)\r\n-    sim.x0 = xe;\r\n-    options = odeset(options,'InitialStep',t(nt)-t(nt-refine),...\r\n-      'MaxStep',t(nt)-t(1));\r\n-   \r\n-   tstart = t(nt);\r\n-\r\n-end\r\n-toc\r\n-%% Plot output\r\n-% Unpack solution vector. Solution is in cannonical coordinates\r\n-res.t = tout;\r\n-res.x = yout;\r\n-res.q = res.x(:,1:6);\r\n-res.p0 = res.x(:,7:12);\r\n-res.q_hat1 = res.x(:,13:18);\r\n-res.p_hat1 = res.x(:,19:24);\r\n-res.dis1 = res.x(:,25:30);\r\n-res.q_hat2 = res.x(:,31:36);\r\n-res.p_hat2 = res.x(:,37:42);\r\n-res.dis2 = res.x(:,43:48);\r\n-res.dis3 = res.x(:,61:66);\r\n-res.dis =res.dis1+res.dis2+res.dis3;\r\n-res.k4 = k4;\r\n-\r\n-% Compute qualtities of interest\r\n-[res]=CompulateData(res,sys,ctrl); \r\n-\r\n-disp(\"运行结束，打印数据\")\r\n-% Save results\r\n-if ctrl.selector == 1\r\n-    TSMC = res;\r\n-    save('Results/TSMC.mat', 'TSMC');\r\n-    disp(\"TSMC数据保存成功\");\r\n-elseif ctrl.selector == 2\r\n-    sakata =res;\r\n-    save('Results/sakata.mat', 'sakata');\r\n-    disp(\"PBSMC数据保存成功\");\r\n-else\r\n-    Joel = res;\r\n-    save('Results/Joel.mat', 'Joel');\r\n-    disp(\"K-P数据保存成功\");\r\n-end\r\n-plotAllData(res,ctrl);%Plot results\r\n-disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732969010523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,12 +75,12 @@\n        break;\r\n    end\r\n     xe(67) = antiSat(res.x, kMax);\r\n     sim.x0 = xe;\r\n-    options = odeset(options,'InitialStep',t(nt)-t(nt-refine),...\r\n-      'MaxStep',t(nt)-t(1));\r\n+    options = odeset(options,'InitialStep',res.t(nt)-res.t(nt-refine),...\r\n+      'MaxStep',res.t(nt)-res.t(1));\r\n    \r\n-   tstart = t(nt);\r\n+   tstart = res.t(nt);\r\n \r\n end\r\n toc\r\n %% Plot output\r\n"
                },
                {
                    "date": 1732969119770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n ieout = [];\r\n tic\r\n while 1\r\n  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n-\r\n+xe(67)\r\n nt = length(res.t);\r\n \r\n    tout = [tout; res.t(2:nt)];\r\n    yout = [yout, res.x(2:nt,:)'];\r\n"
                },
                {
                    "date": 1732969175960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,32 +57,32 @@\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tout = 0;\r\n yout = sim.x0;\r\n-teout = [];\r\n-yeout = [];\r\n-ieout = [];\r\n+% teout = [];\r\n+% yeout = [];\r\n+% ieout = [];\r\n tic\r\n-while 1\r\n+% while 1\r\n  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n-xe(67)\r\n-nt = length(res.t);\r\n+% xe(67)\r\n+% nt = length(res.t);\r\n \r\n-   tout = [tout; res.t(2:nt)];\r\n-   yout = [yout, res.x(2:nt,:)'];\r\n-   teout = [teout; te];          % Events at tstart are never reported.\r\n-   yeout = [yeout; xe];\r\n-   if sim.tstart >= sim.t_end\r\n-       break;\r\n-   end\r\n-    xe(67) = antiSat(res.x, kMax);\r\n-    sim.x0 = xe;\r\n-    options = odeset(options,'InitialStep',res.t(nt)-res.t(nt-refine),...\r\n-      'MaxStep',res.t(nt)-res.t(1));\r\n+%    tout = [tout; res.t(2:nt)];\r\n+%    yout = [yout, res.x(2:nt,:)'];\r\n+%    teout = [teout; te];          % Events at tstart are never reported.\r\n+%    yeout = [yeout; xe];\r\n+%    if sim.tstart >= sim.t_end\r\n+%        break;\r\n+%    end\r\n+%     xe(67) = antiSat(res.x, kMax);\r\n+%     sim.x0 = xe;\r\n+%     options = odeset(options,'InitialStep',res.t(nt)-res.t(nt-refine),...\r\n+%       'MaxStep',res.t(nt)-res.t(1));\r\n    \r\n-   tstart = res.t(nt);\r\n+%    tstart = res.t(nt);\r\n \r\n-end\r\n+% end\r\n toc\r\n %% Plot output\r\n % Unpack solution vector. Solution is in cannonical coordinates\r\n res.t = tout;\r\n"
                },
                {
                    "date": 1732969230962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.tstart = 0;\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+refine = 4;\r\n+kMax = 4.1;\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tout = 0;\r\n+yout = sim.x0;\r\n+% teout = [];\r\n+% yeout = [];\r\n+% ieout = [];\r\n+tic\r\n+% while 1\r\n+ [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n+% xe(67)\r\n+% nt = length(res.t);\r\n+\r\n+%    tout = [tout; res.t(2:nt)];\r\n+%    yout = [yout, res.x(2:nt,:)'];\r\n+%    teout = [teout; te];          % Events at tstart are never reported.\r\n+%    yeout = [yeout; xe];\r\n+%    if sim.tstart >= sim.t_end\r\n+%        break;\r\n+%    end\r\n+%     xe(67) = antiSat(res.x, kMax);\r\n+%     sim.x0 = xe;\r\n+%     options = odeset(options,'InitialStep',res.t(nt)-res.t(nt-refine),...\r\n+%       'MaxStep',res.t(nt)-res.t(1));\r\n+   \r\n+%    tstart = res.t(nt);\r\n+\r\n+% end\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+% res.t = tout;\r\n+% res.x = yout;\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = k4;\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl); \r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732969249327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n res.p_hat2 = res.x(:,37:42);\r\n res.dis2 = res.x(:,43:48);\r\n res.dis3 = res.x(:,61:66);\r\n res.dis =res.dis1+res.dis2+res.dis3;\r\n-res.k4 = k4;\r\n+res.k4 = res.x(:,67);\r\n \r\n % Compute qualtities of interest\r\n [res]=CompulateData(res,sys,ctrl); \r\n \r\n"
                },
                {
                    "date": 1732969271451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n sim.z_hat = zeros(54,1);\r\n sim.adptiveParam = 4;\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n \r\n-options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n \r\n \r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n"
                },
                {
                    "date": 1732969303272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.tstart = 0;\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+refine = 4;\r\n+kMax = 4.1;\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+% options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tout = 0;\r\n+yout = sim.x0;\r\n+% teout = [];\r\n+% yeout = [];\r\n+% ieout = [];\r\n+tic\r\n+% while 1\r\n+%  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n+ [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n+% xe(67)\r\n+% nt = length(res.t);\r\n+\r\n+%    tout = [tout; res.t(2:nt)];\r\n+%    yout = [yout, res.x(2:nt,:)'];\r\n+%    teout = [teout; te];          % Events at tstart are never reported.\r\n+%    yeout = [yeout; xe];\r\n+%    if sim.tstart >= sim.t_end\r\n+%        break;\r\n+%    end\r\n+%     xe(67) = antiSat(res.x, kMax);\r\n+%     sim.x0 = xe;\r\n+%     options = odeset(options,'InitialStep',res.t(nt)-res.t(nt-refine),...\r\n+%       'MaxStep',res.t(nt)-res.t(1));\r\n+   \r\n+%    tstart = res.t(nt);\r\n+\r\n+% end\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+% res.t = tout;\r\n+% res.x = yout;\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = res.x(:,67);\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl); \r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                },
                {
                    "date": 1732969319199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n sim.adptiveParam = 4;\r\n sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n \r\n % options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n \r\n-\r\n % Comcatinate model with control law\r\n % ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n % Solve ODE\r\n tout = 0;\r\n"
                },
                {
                    "date": 1732969370456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+%%\r\n+% This script is used to run the simulation of CDPR system with PB-SMC control\r\n+% and compare with other control laws.\r\n+% Author: HouZongbin\r\n+% Email: 1335657223@qq.com\r\n+\r\n+clear\r\n+close all\r\n+clc\r\n+\r\n+%% Add scripts path\r\n+addpath('./simulation_scripts');\r\n+\r\n+%% Simulation settings\r\n+% Simulation step 仿真步长\r\n+sim.tstart = 0;\r\n+sim.delta_t = 0.01;\r\n+% Simulation length  仿真时长\r\n+sim.t_end = 8;\r\n+refine = 4;\r\n+kMax = 4.1;\r\n+%% Define system and control parameters\r\n+% Define symbolic variables\r\n+syms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\n+q_sym = [q1 q2 q3 q4 q5 q6].';\r\n+p_sym = [p1 p2 p3 p4 p5 p6].';\r\n+\r\n+% Define 6DOF CDPR plant\r\n+pa.m=6000;%Quality of mobile platform\r\n+pa.g=[0;0;9.8];%Gravity\r\n+\r\n+[sys]=DefineCDPR_Plant(pa.m,pa.g);% Define plant\r\n+[ctrl]=DefineTraj();% Define desired trajectory\r\n+%Selector for control law \r\n+ctrl.selector = 1;%1:TSMC;2:PBSMC;3:K-P\r\n+\r\n+%% PB-SMC控制算法设计\r\n+if ctrl.selector  == 1\r\n+    [ctrl]=TSMCController(sys,ctrl);%TSMC\r\n+elseif ctrl.selector  == 2\r\n+   [ctrl]=sakataController(sys,ctrl);%PBSMC\r\n+elseif ctrl.selector  == 3\r\n+    [ctrl]=JoelController(sys,ctrl);%K-PSC\r\n+end\r\n+%% Run simulation\r\n+% Define initial conditions\r\n+sim.q0 = [-0 -0 0 0 0 0].';%Define the inital value of configuration\r\n+sim.p0 = [0 0 0 0 0 0].';%Define the inital value of momentum\r\n+sim.z_hat = zeros(54,1);\r\n+sim.adptiveParam = 4;\r\n+sim.x0 = [sim.q0; sim.p0; sim.z_hat; sim.adptiveParam];\r\n+\r\n+% options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0,'Events', @(t, x) saturationEvent(x, kMax));%Set options for ode solver\r\n+options = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-0);%Set options for ode solver\r\n+\r\n+% Comcatinate model with control law\r\n+% ode = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);%Define ODE function\r\n+% Solve ODE\r\n+tout = 0;\r\n+yout = sim.x0;\r\n+% teout = [];\r\n+% yeout = [];\r\n+% ieout = [];\r\n+tic\r\n+% while 1\r\n+%  [res.t,res.x,te,xe,ie] = ode45(@(t,x) plant(t,x,sys,ctrl),[sim.tstart sim.delta_t sim.t_end ],sim.x0,options);\r\n+ [res.t,res.x] = ode45(@(t,x) plant(t,x,sys,ctrl),sim.tstart:sim.delta_t:sim.t_end ,sim.x0,options);\r\n+% xe(67)\r\n+% nt = length(res.t);\r\n+\r\n+%    tout = [tout; res.t(2:nt)];\r\n+%    yout = [yout, res.x(2:nt,:)'];\r\n+%    teout = [teout; te];          % Events at tstart are never reported.\r\n+%    yeout = [yeout; xe];\r\n+%    if sim.tstart >= sim.t_end\r\n+%        break;\r\n+%    end\r\n+%     xe(67) = antiSat(res.x, kMax);\r\n+%     sim.x0 = xe;\r\n+%     options = odeset(options,'InitialStep',res.t(nt)-res.t(nt-refine),...\r\n+%       'MaxStep',res.t(nt)-res.t(1));\r\n+   \r\n+%    tstart = res.t(nt);\r\n+\r\n+% end\r\n+toc\r\n+%% Plot output\r\n+% Unpack solution vector. Solution is in cannonical coordinates\r\n+% res.t = tout;\r\n+% res.x = yout;\r\n+res.q = res.x(:,1:6);\r\n+res.p0 = res.x(:,7:12);\r\n+res.q_hat1 = res.x(:,13:18);\r\n+res.p_hat1 = res.x(:,19:24);\r\n+res.dis1 = res.x(:,25:30);\r\n+res.q_hat2 = res.x(:,31:36);\r\n+res.p_hat2 = res.x(:,37:42);\r\n+res.dis2 = res.x(:,43:48);\r\n+res.dis3 = res.x(:,61:66);\r\n+res.dis =res.dis1+res.dis2+res.dis3;\r\n+res.k4 = res.x(:,67);\r\n+\r\n+% Compute qualtities of interest\r\n+[res]=CompulateData(res,sys,ctrl); \r\n+\r\n+disp(\"运行结束，打印数据\")\r\n+% Save results\r\n+if ctrl.selector == 1\r\n+    TSMC = res;\r\n+    save('Results/TSMC.mat', 'TSMC');\r\n+    disp(\"TSMC数据保存成功\");\r\n+elseif ctrl.selector == 2\r\n+    sakata =res;\r\n+    save('Results/sakata.mat', 'sakata');\r\n+    disp(\"PBSMC数据保存成功\");\r\n+else\r\n+    Joel = res;\r\n+    save('Results/Joel.mat', 'Joel');\r\n+    disp(\"K-P数据保存成功\");\r\n+end\r\n+plotAllData(res,ctrl);%Plot results\r\n+disp(\"打印数据结束\")\r\n"
                }
            ],
            "date": 1729815935215,
            "name": "Commit-0",
            "content": "clear\r\nclose all\r\nclc\r\n\r\naddpath('./simulation_scripts');\r\n\r\n\r\n%% Simulation settings\r\n% Simulation step 仿真步长\r\nsim.delta_t = 0.01;\r\n% Simulation length仿真时长\r\nsim.t_end = 3.5;\r\n\r\n\r\nsyms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\nq_sym = [q1 q2 q3 q4 q5 q6].';\r\np_sym = [p1 p2 p3 p4 p5 p6].';\r\n\r\n%% Define 6DOF CDPR plant\r\npa.m=6000;%动平台质量\r\npa.g=[0;0;9.8];%重力加速度\r\n[sys]=DefineCDPR_Plant(pa.m,pa.g);\r\n[ctrl]=DefineTraj();\r\nctrl.selector = 2;\r\n%% PB-SMC控制算法设计\r\nif ctrl.selector  == 1\r\n    [ctrl]=TSMCController(sys,ctrl);\r\nelseif ctrl.selector  == 2\r\n   [ctrl]=sakataController(sys,ctrl);\r\nelseif ctrl.selector  == 3\r\n    [ctrl]=JoelController(sys,ctrl);\r\nend\r\n%% Run simulation\r\n% Define initial conditions\r\nsim.q0 = [-0.5 -1 2 3 2 0].';\r\nsim.p0 = [0 0 0 0 0 0].';\r\nsim.x0 = [sim.q0; sim.p0];\r\n\r\noptions = odeset('OutputFcn', @myOutputFcn,'RelTol',1e-1);\r\n\r\n\r\n% Comcatinate model with control law\r\node = @(t,x) sys.dx(x(1:6),x(7:12),ctrl.u(t,x(1:6),ctrl.p(x(1:6),x(7:12))),t);\r\n% Solve ODE\r\n% tic\r\n [res.t,res.x] = ode78(ode,0:sim.delta_t:sim.t_end,sim.x0,options);\r\n% toc\r\n%% Plot output\r\n% Unpack solution vector. Solution is in cannonical coordinates\r\nres.q = res.x(:,1:6);\r\nres.p0 = res.x(:,7:12);\r\n\r\n\r\n% Compute qualtities of interest\r\n[res]=CompulateData(res,sys,ctrl);\r\n\r\ndisp(\"运行结束，打印数据\")\r\n%保存数据到指定路径\r\nif ctrl.selector == 1\r\n    TSMC = res;\r\n    save('Results/TSMC.mat', 'TSMC');\r\nelseif ctrl.selector == 2\r\n    sakata =res;\r\n    save('Results/sakata.mat', 'sakata');\r\nelse\r\n    Joel = res;\r\n    save('Results/Joel.mat', 'Joel');\r\nend\r\n%save('Results\\Results.mat', 'res');%windows \r\nplotAllData(res,ctrl);%出图\r\ndisp(\"打印数据结束\")\r\n"
        }
    ]
}