{
    "sourceFile": "simulation_scripts/sakataController.m",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1729838662578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729838684169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n  K2=diag([500;500;500;500;500;300]);\r\n beta = 0;\r\n gamma = 3;\r\n delta = 1;\r\n-ctrl.phi=@(t,q,p) (K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p)+ beta.*ctrl.eq(t,q).^(gamma/delta););%Here q is a variable to be determined\r\n+ctrl.phi=@(t,q,p) K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p)+ beta.*ctrl.eq(t,q).^(gamma/delta);%Here q is a variable to be determined\r\n %phi=@(q,p) K*q+tan(p);\r\n %Take a partial derivative of \\phi\r\n dphideq=matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),q_sym),'vars',{q_sym});\r\n dphidep=matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),p_sym),'vars',{p_sym});\r\n"
                },
                {
                    "date": 1729838768452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n %VI. NUMERICAL EXAMPLE Case1 and K\r\n  %K=tril(ones(6));\r\n  K=diag([500000;500000;500000;500000;500000;500000]);\r\n  K2=diag([500;500;500;500;500;300]);\r\n-beta = 0;\r\n+beta = 100000;\r\n gamma = 3;\r\n delta = 1;\r\n ctrl.phi=@(t,q,p) K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p)+ beta.*ctrl.eq(t,q).^(gamma/delta);%Here q is a variable to be determined\r\n %phi=@(q,p) K*q+tan(p);\r\n"
                },
                {
                    "date": 1729840176163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,29 +29,29 @@\n  K2=diag([500;500;500;500;500;300]);\r\n beta = 100000;\r\n gamma = 3;\r\n delta = 1;\r\n-ctrl.phi=@(t,q,p) K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p);%Here q is a variable to be determined\r\n+ctrl.phi=@(t,q,p) K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p)+ beta.*ctrl.eq(t,q).^(gamma/delta);%Here q is a variable to be determined\r\n %phi=@(q,p) K*q+tan(p);\r\n %Take a partial derivative of \\phi\r\n dphideq = matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),q_sym),'vars',{q_sym});\r\n dphidep = matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),p_sym),'vars',{p_sym});\r\n-%Replace the variable to be determined q with eq(\\tilde \\q);\r\n+%Replace the variable to be determined q with eq(\\tilde \\q)\r\n \r\n %compute the Lambda from eq.(22)\r\n    K3 = diag([5;5;5;5;5;5]);\r\n     % K3 = diag([0;0;0;0;0;0]);\r\n   Kd =@(t,q) K3 + 5*(gbellmf(ctrl.eq(t,q),[2.5,3,0])).*K3;\r\n \r\n he=sym(0.5*(dphideq(q_sym)*(ctrl.T(q_sym)))*dphidep(p_sym)');%这里的系数对系统收敛到滑模面上有影响\r\n-%he=100000*0.5*(dphidq(q_sym)*ctrl.T(q_sym))*dphidep(t_sym,q_sym,p_sym)';\r\n-Lambda=matlabFunction(2*(he+he'),'vars',[{q_sym,p_sym}]);\r\n \r\n+Lambda=matlabFunction(2*(he+he'),'vars',[{p_sym}]);\r\n+\r\n %Compute the partial derivative of U\r\n normPhi=ctrl.phi(t_sym,q_sym,p_sym);\r\n dUdPhi=matlabFunction((ctrl.phi(t_sym,q_sym,p_sym))/(sqrt(sum(normPhi.^2))),'vars',[{t_sym},{q_sym},{p_sym}]);\r\n %Then the feedback controller from eq.(23)\r\n-   ctrl.v=@(t,q,p) (-inv(dphidep(p))*Lambda(q,p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(p))*dphideq(q))*(ctrl.T(q)))*ctrl.ep(t,q,p));\r\n+   ctrl.v=@(t,q,p) (-inv(dphidep(p))*Lambda(p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(p))*dphideq(q))*(ctrl.T(q)))*ctrl.ep(t,q,p));\r\n % ctrl.v=@(t,q,p) (-inv(dphidep(t,q,p))*Lambda(t,q,p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(t,q,p))*dphidq())*ctrl.T(q))*ctrl.ep(t,q,p));\r\n  % ctrl.v=@(t,q,p) 0;\r\n %input u from eq.(20)\r\n  ctrl.u = @(t,q,p) ctrl.G(q)\\(ctrl.D(q)*ctrl.pd(t,q) + ctrl.dpddq(t,q)*(ctrl.T(q)*p) + ctrl.T(q)\\ctrl.ddqd(t) + ctrl.T(q)'*sys.dVdq(q) + ctrl.v(t,q,p)-Kd(t,q)*ctrl.ep(t,q,p));\r\n"
                },
                {
                    "date": 1729840184527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,29 +29,29 @@\n  K2=diag([500;500;500;500;500;300]);\r\n beta = 100000;\r\n gamma = 3;\r\n delta = 1;\r\n-ctrl.phi=@(t,q,p) K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p);%Here q is a variable to be determined\r\n+ctrl.phi=@(t,q,p) K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p)+ beta.*ctrl.eq(t,q).^(gamma/delta);%Here q is a variable to be determined\r\n %phi=@(q,p) K*q+tan(p);\r\n %Take a partial derivative of \\phi\r\n dphideq = matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),q_sym),'vars',{q_sym});\r\n dphidep = matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),p_sym),'vars',{p_sym});\r\n-%Replace the variable to be determined q with eq(\\tilde \\q);\r\n+%Replace the variable to be determined q with eq(\\tilde \\q)\r\n \r\n %compute the Lambda from eq.(22)\r\n    K3 = diag([5;5;5;5;5;5]);\r\n     % K3 = diag([0;0;0;0;0;0]);\r\n   Kd =@(t,q) K3 + 5*(gbellmf(ctrl.eq(t,q),[2.5,3,0])).*K3;\r\n \r\n he=sym(0.5*(dphideq(q_sym)*(ctrl.T(q_sym)))*dphidep(p_sym)');%这里的系数对系统收敛到滑模面上有影响\r\n-%he=100000*0.5*(dphidq(q_sym)*ctrl.T(q_sym))*dphidep(t_sym,q_sym,p_sym)';\r\n-Lambda=matlabFunction(2*(he+he'),'vars',[{q_sym,p_sym}]);\r\n \r\n+Lambda=matlabFunction(2*(he+he'),'vars',[{p_sym}]);\r\n+\r\n %Compute the partial derivative of U\r\n normPhi=ctrl.phi(t_sym,q_sym,p_sym);\r\n dUdPhi=matlabFunction((ctrl.phi(t_sym,q_sym,p_sym))/(sqrt(sum(normPhi.^2))),'vars',[{t_sym},{q_sym},{p_sym}]);\r\n %Then the feedback controller from eq.(23)\r\n-   ctrl.v=@(t,q,p) (-inv(dphidep(p))*Lambda(q,p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(p))*dphideq(q))*(ctrl.T(q)))*ctrl.ep(t,q,p));\r\n+   ctrl.v=@(t,q,p) (-inv(dphidep(p))*Lambda(p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(p))*dphideq(q))*(ctrl.T(q)))*ctrl.ep(t,q,p));\r\n % ctrl.v=@(t,q,p) (-inv(dphidep(t,q,p))*Lambda(t,q,p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(t,q,p))*dphidq())*ctrl.T(q))*ctrl.ep(t,q,p));\r\n  % ctrl.v=@(t,q,p) 0;\r\n %input u from eq.(20)\r\n  ctrl.u = @(t,q,p) ctrl.G(q)\\(ctrl.D(q)*ctrl.pd(t,q) + ctrl.dpddq(t,q)*(ctrl.T(q)*p) + ctrl.T(q)\\ctrl.ddqd(t) + ctrl.T(q)'*sys.dVdq(q) + ctrl.v(t,q,p)-Kd(t,q)*ctrl.ep(t,q,p));\r\n"
                }
            ],
            "date": 1729838662578,
            "name": "Commit-0",
            "content": "function [ctrl]=sakataController(sys,ctrl)\r\nsyms q1 q2 q3 q4 q5 q6 p1 p2 p3 p4 p5 p6 t_sym\r\nq_sym = [q1 q2 q3 q4 q5 q6].';\r\np_sym = [p1 p2 p3 p4 p5 p6].';\r\n\r\nctrl.T =matlabFunction(manualCholesky(inv(sys.M(q_sym))),'vars',{q_sym});\r\n\r\nctrl.p = @(q,p) ctrl.T(q)'*p;\r\nctrl.D = @(q) sys.D(q);\r\nctrl.G = @(q) ctrl.T(q)'*sys.G(q);\r\n% Define target trajectory and derivatives\r\n\r\n% Compute the target momentum from (13)\r\n%期望动量的坐标变换\r\nctrl.pd = @(t,q) ctrl.T(q)\\ctrl.dqd(t);\r\n\r\n% Compute the error coordinates on q, p from (11), (15)\r\n%速度和动量误差\r\nctrl.ep = @(t,q,p) p - ctrl.pd(t,q);\r\nctrl.eq = @(t,q) q - ctrl.qd(t);\r\n% Compute the gradient of the reference momentum with respect to\r\n% configuration as per (16)\r\n%求期望动量的梯度\r\nctrl.dpddq = matlabFunction(jacobian(ctrl.pd(t_sym,q_sym),q_sym),'vars',[{t_sym}, {q_sym}]);\r\n%% Define Passivity-based sliding mode controller\r\n%VI. NUMERICAL EXAMPLE Case1 and K\r\n %K=tril(ones(6));\r\n K=diag([500000;500000;500000;500000;500000;500000]);\r\n K2=diag([500;500;500;500;500;300]);\r\nbeta = 0;\r\ngamma = 3;\r\ndelta = 1;\r\nctrl.phi=@(t,q,p) (K*ctrl.eq(t,q)+K2*ctrl.ep(t,q,p)+ beta.*ctrl.eq(t,q).^(gamma/delta););%Here q is a variable to be determined\r\n%phi=@(q,p) K*q+tan(p);\r\n%Take a partial derivative of \\phi\r\ndphideq=matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),q_sym),'vars',{q_sym});\r\ndphidep=matlabFunction(jacobian(ctrl.phi(t_sym,q_sym,p_sym),p_sym),'vars',{p_sym});\r\n%Replace the variable to be determined q with eq(\\tilde \\q)\r\n\r\n%compute the Lambda from eq.(22)\r\n   K3 = diag([5;5;5;5;5;5]);\r\n    % K3 = diag([0;0;0;0;0;0]);\r\n  Kd =@(t,q) K3 + 5*(gbellmf(ctrl.eq(t,q),[2.5,3,0])).*K3;\r\n\r\nhe=sym(0.5*(dphideq(q_sym)*(ctrl.T(q_sym)))*dphidep(p_sym)');%这里的系数对系统收敛到滑模面上有影响\r\n%he=100000*0.5*(dphidq(q_sym)*ctrl.T(q_sym))*dphidep(t_sym,q_sym,p_sym)';\r\nLambda=matlabFunction(2*(he+he'),'vars',[{p_sym}]);\r\n\r\n%Compute the partial derivative of U\r\nnormPhi=ctrl.phi(t_sym,q_sym,p_sym);\r\ndUdPhi=matlabFunction((ctrl.phi(t_sym,q_sym,p_sym))/(sqrt(sum(normPhi.^2))),'vars',[{t_sym},{q_sym},{p_sym}]);\r\n%Then the feedback controller from eq.(23)\r\n   ctrl.v=@(t,q,p) (-inv(dphidep(p))*Lambda(p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(p))*dphideq(q))*(ctrl.T(q)))*ctrl.ep(t,q,p));\r\n% ctrl.v=@(t,q,p) (-inv(dphidep(t,q,p))*Lambda(t,q,p)*dUdPhi(t,q,p)+(ctrl.D(q))*ctrl.ep(t,q,p)-((inv(dphidep(t,q,p))*dphidq())*ctrl.T(q))*ctrl.ep(t,q,p));\r\n % ctrl.v=@(t,q,p) 0;\r\n%input u from eq.(20)\r\n ctrl.u = @(t,q,p) ctrl.G(q)\\(ctrl.D(q)*ctrl.pd(t,q) + ctrl.dpddq(t,q)*(ctrl.T(q)*p) + ctrl.T(q)\\ctrl.ddqd(t) + ctrl.T(q)'*sys.dVdq(q) + ctrl.v(t,q,p)-Kd(t,q)*ctrl.ep(t,q,p));\r\n% ctrl.u=@(t,q,p) ctrl.G(q)\\(-Kd*p);\r\n% Define  closed-loop energy in eq.(24)\r\nctrl.KE = @(t,q,p) 0.5*sum(ctrl.ep(t,q,p).^2);%kinetic energy\r\nctrl.U=matlabFunction((sqrt(sum(normPhi.^2))),'vars',[{t_sym},{q_sym},{p_sym}]);%potential energy\r\nctrl.Hd = @(t,q,p) ctrl.KE(t,q,p) + ctrl.U(t,q,p);\r\n"
        }
    ]
}